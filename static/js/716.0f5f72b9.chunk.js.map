{"version":3,"file":"static/js/716.0f5f72b9.chunk.js","mappings":"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","sources":["components/AuthForms/AuthForms.styled.jsx","components/AuthForms/Login.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { Button } from '@mui/material';\nimport variables from 'global/Variables';\nimport styled from 'styled-components';\nexport const AuthForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const AuthFormCard = styled.div`\n  display: block;\n  padding: 25px 35px 50px;\n  width: 450px;\n  border-radius: 4px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nexport const SubmitBtn = styled(Button)`\n  && {\n    border: 1px solid;\n    border-color: #1f874785;\n    color: ${variables.greenText};\n    &:hover,\n    :active,\n    :focus {\n      border-color: rgba(7, 142, 43, 0.5);\n      background-color: rgba(7, 142, 43, 0.037);\n      box-shadow: rgba(3, 107, 31, 0.5);\n    }\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  text-align: center;\n  margin: 0 0 40px;\n  font-size: 24px;\n  font-weight: 300;\n`;\nexport const AuthHelperText = styled.p`\n  color: rgba(80, 78, 78, 0.76);\n`;\n","import { FormControl, Input, InputLabel } from '@mui/material';\nimport { SubmitBtn } from './AuthForms.styled';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authThunk';\nimport * as Yup from 'yup';\nimport {\n  AuthForm,\n  AuthFormCard,\n  AuthHelperText,\n  FormTitle,\n} from './AuthForms.styled';\nimport { useAuth } from 'hooks/useAuth';\n\nfunction LoginForm() {\n  const dispatch = useDispatch();\n  const { isLogging } = useAuth();\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.')\n      .matches(/[a-zA-Z]/, 'Password can only contain Latin letters.'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validate: values => {\n      const errors = {};\n      try {\n        LoginSchema.validateSync(values, { abortEarly: false });\n      } catch (validationErrors) {\n        validationErrors.inner.forEach(error => {\n          errors[error.path] = error.message;\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: user => {\n      dispatch(login(user));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <AuthFormCard>\n      <FormTitle>Sign in to Journeezy</FormTitle>\n      <AuthForm onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <InputLabel htmlFor=\"email\">Email</InputLabel>\n          <Input\n            size=\"small\"\n            type=\"text\"\n            id=\"email\"\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n            error={formik.touched.email && Boolean(formik.errors.email)}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <AuthHelperText>{formik.errors.email}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <FormControl>\n          <InputLabel htmlFor=\"password\">Password</InputLabel>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            value={formik.values.password}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <AuthHelperText>{formik.errors.password}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <SubmitBtn type=\"submit\" disabled={isLogging}>\n          Sign in\n        </SubmitBtn>\n      </AuthForm>\n    </AuthFormCard>\n  );\n}\n\nexport default LoginForm;\n","import LoginForm from 'components/AuthForms/Login';\n\nfunction LoginPage() {\n  return <LoginForm />;\n}\n\nexport default LoginPage;\n"],"names":["AuthForm","styled","_templateObject","_taggedTemplateLiteral","AuthFormCard","_templateObject2","SubmitBtn","Button","_templateObject3","variables","FormTitle","_templateObject4","AuthHelperText","_templateObject5","dispatch","useDispatch","isLogging","useAuth","LoginSchema","Yup","shape","email","required","password","min","matches","formik","useFormik","initialValues","validate","values","errors","validateSync","abortEarly","validationErrors","inner","forEach","error","path","message","onSubmit","user","login","resetForm","_jsxs","children","_jsx","handleSubmit","FormControl","InputLabel","htmlFor","Input","size","type","id","name","value","onChange","handleChange","onBlur","handleBlur","autoComplete","touched","Boolean","disabled","LoginForm"],"sourceRoot":""}