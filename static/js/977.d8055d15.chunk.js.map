{"version":3,"file":"static/js/977.d8055d15.chunk.js","mappings":"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","sources":["components/AuthForms/AuthForms.styled.jsx","components/AuthForms/Register.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { Button, Input, InputLabel } from '@mui/material';\nimport variables from 'global/Variables';\nimport styled from 'styled-components';\nexport const AuthForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n`;\n\nexport const AuthFormCard = styled.div`\n  display: block;\n  padding: 25px 35px 50px;\n  width: 450px;\n  border-radius: 4px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nexport const SubmitBtn = styled(Button)`\n  && {\n    border: 1px solid;\n    border-color: #1f874785;\n    color: ${variables.greenText};\n    &:hover,\n    :active,\n    :focus {\n      border-color: rgba(7, 142, 43, 0.5);\n      background-color: rgba(7, 142, 43, 0.037);\n      box-shadow: rgba(3, 107, 31, 0.5);\n    }\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  text-align: center;\n  margin: 0 0 40px;\n  font-size: 24px;\n  font-weight: 300;\n`;\nexport const AuthHelperText = styled.p`\n  color: rgba(80, 78, 78, 0.76);\n`;\n\nexport const InputField = styled(Input)`\n  && {\n    &:after {\n      border-bottom: 2px solid ${variables.greenText};\n    }\n  }\n`;\n\nexport const Label = styled(InputLabel)`\n  &&.Mui-focused {\n    color: ${variables.greenText};\n  }\n`;\n","import { FormControl } from '@mui/material';\nimport { InputField, Label, SubmitBtn } from './AuthForms.styled';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authThunk';\nimport * as Yup from 'yup';\nimport {\n  AuthForm,\n  AuthFormCard,\n  AuthHelperText,\n  FormTitle,\n} from './AuthForms.styled';\nimport { useAuth } from 'hooks/useAuth';\n\nfunction RegisterForm() {\n  const dispatch = useDispatch();\n  const { isLogging } = useAuth();\n\n  const RegisterSchema = Yup.object().shape({\n    name: Yup.string()\n      .required('Required')\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]+$/, 'Name can only contain letters'),\n    lastName: Yup.string()\n      .required('Required')\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]+$/, 'Name can only contain letters'),\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .required('No password provided.')\n      .min(8, 'Password is too short - should be 8 chars minimum.')\n      .matches(\n        /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[\\]:;<>,.?/~_+-=|\\\\]).{8,32}$/,\n        'Password should have at least one uppercase letter, one digit, and one special character'\n      ),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      lastName: '',\n      email: '',\n      password: '',\n    },\n    validate: values => {\n      const errors = {};\n      try {\n        RegisterSchema.validateSync(values, { abortEarly: false });\n      } catch (validationErrors) {\n        validationErrors.inner.forEach(error => {\n          errors[error.path] = error.message;\n        });\n      }\n\n      return errors;\n    },\n    onSubmit: user => {\n      dispatch(register(user));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <AuthFormCard>\n      <FormTitle>Sign up to Journeezy</FormTitle>\n      <AuthForm onSubmit={formik.handleSubmit}>\n        <FormControl>\n          <Label htmlFor=\"name\">Name</Label>\n          <InputField\n            size=\"small\"\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n            error={formik.touched.name && Boolean(formik.errors.name)}\n          />\n          {formik.touched.name && formik.errors.name ? (\n            <AuthHelperText>{formik.errors.name}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <FormControl>\n          <Label htmlFor=\"lastName\">Last name</Label>\n          <InputField\n            size=\"small\"\n            type=\"text\"\n            id=\"lastName\"\n            name=\"lastName\"\n            value={formik.values.lastName}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n            error={formik.touched.lastName && Boolean(formik.errors.lastName)}\n          />\n          {formik.touched.lastName && formik.errors.lastName ? (\n            <AuthHelperText>{formik.errors.lastName}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <FormControl>\n          <Label htmlFor=\"email\">Email</Label>\n          <InputField\n            size=\"small\"\n            type=\"text\"\n            id=\"email\"\n            name=\"email\"\n            value={formik.values.email}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n            error={formik.touched.email && Boolean(formik.errors.email)}\n          />\n          {formik.touched.email && formik.errors.email ? (\n            <AuthHelperText>{formik.errors.email}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <FormControl>\n          <Label htmlFor=\"password\">Password</Label>\n          <InputField\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            value={formik.values.password}\n            error={formik.touched.password && Boolean(formik.errors.password)}\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            autoComplete=\"on\"\n          />\n          {formik.touched.password && formik.errors.password ? (\n            <AuthHelperText>{formik.errors.password}</AuthHelperText>\n          ) : null}\n        </FormControl>\n        <SubmitBtn type=\"submit\" disabled={isLogging}>\n          Sign up\n        </SubmitBtn>\n      </AuthForm>\n    </AuthFormCard>\n  );\n}\n\nexport default RegisterForm;\n","import RegisterForm from 'components/AuthForms/Register';\n\nfunction RegisterPage() {\n  return <RegisterForm />;\n}\n\nexport default RegisterPage;\n"],"names":["AuthForm","styled","_templateObject","_taggedTemplateLiteral","AuthFormCard","_templateObject2","SubmitBtn","Button","_templateObject3","variables","FormTitle","_templateObject4","AuthHelperText","_templateObject5","InputField","Input","_templateObject6","Label","InputLabel","_templateObject7","dispatch","useDispatch","isLogging","useAuth","RegisterSchema","Yup","shape","name","required","matches","lastName","email","password","min","formik","useFormik","initialValues","validate","values","errors","validateSync","abortEarly","validationErrors","inner","forEach","error","path","message","onSubmit","user","register","resetForm","_jsxs","children","_jsx","handleSubmit","FormControl","htmlFor","size","type","id","value","onChange","handleChange","onBlur","handleBlur","autoComplete","touched","Boolean","disabled","RegisterForm"],"sourceRoot":""}